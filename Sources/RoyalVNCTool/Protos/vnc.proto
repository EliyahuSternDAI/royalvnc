syntax = "proto3";

package vnc;

option swift_prefix = "Vnc_";

// Common acknowledgment message for events that don't need a specific response.
message EventAck {
    bool success = 1;
    string message = 2;
}

// --- Session Management ---

message StartSessionRequest {
    string hostname = 1;
    uint32 port = 2;
    string username = 3;
    string password = 4;
    bool shared = 5;
}

message StartSessionResponse {
    string sessionID = 1;
    bool success = 2;
    string message = 3;
}

message StopSessionRequest {
    string sessionID = 1;
}

// --- Session Listing ---

message SessionInfo {
    string sessionID = 1;
    string hostname = 2;
    uint32 port = 3;
    string username = 4;
}

message ListSessionsRequest {}

message ListSessionsResponse {
    repeated SessionInfo sessions = 1;
    bool success = 2;
    string message = 3;
}

// --- Input Events ---

message PointerEvent {
    string sessionID = 1;
    uint32 x = 2;
    uint32 y = 3;
    uint32 buttonMask = 4;
}

message MouseWheelEvent {
    string sessionID = 1;
    uint32 x = 2;
    uint32 y = 3;
    sint32 steps = 4;
}

message MouseButtonEvent {
    string sessionID = 1;
    uint32 x = 2;
    uint32 y = 3;
    uint32 buttonMask = 4;
    bool isPressed = 5;
}

message KeyEvent {
    string sessionID = 1;
    uint32 keysym = 2;
    bool isPressed = 3;
}

// --- The VNC Service Definition ---

service VNCService {
    // Session Management
    rpc StartSession(StartSessionRequest) returns (StartSessionResponse);
    rpc StopSession(StopSessionRequest) returns (EventAck);
    rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);

    // Input Events
    rpc SendPointerEvent(PointerEvent) returns (EventAck);
    rpc SendMouseWheelEvent(MouseWheelEvent) returns (EventAck);
    rpc SendMouseButtonEvent(MouseButtonEvent) returns (EventAck);
    rpc SendKeyEvent(KeyEvent) returns (EventAck);
}
