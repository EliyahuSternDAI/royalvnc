//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: vnc.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Vnc_VNCServiceClient`, then call methods of this protocol to make API calls.
internal protocol Vnc_VNCServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol? { get }

  func startSession(
    _ request: Vnc_StartSessionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vnc_StartSessionRequest, Vnc_StartSessionResponse>

  func stopSession(
    _ request: Vnc_StopSessionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vnc_StopSessionRequest, Vnc_EventAck>

  func listSessions(
    _ request: Vnc_ListSessionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vnc_ListSessionsRequest, Vnc_ListSessionsResponse>

  func sendPointerEvent(
    _ request: Vnc_PointerEvent,
    callOptions: CallOptions?
  ) -> UnaryCall<Vnc_PointerEvent, Vnc_EventAck>

  func sendMouseWheelEvent(
    _ request: Vnc_MouseWheelEvent,
    callOptions: CallOptions?
  ) -> UnaryCall<Vnc_MouseWheelEvent, Vnc_EventAck>

  func sendMouseButtonEvent(
    _ request: Vnc_MouseButtonEvent,
    callOptions: CallOptions?
  ) -> UnaryCall<Vnc_MouseButtonEvent, Vnc_EventAck>

  func sendKeyEvent(
    _ request: Vnc_KeyEvent,
    callOptions: CallOptions?
  ) -> UnaryCall<Vnc_KeyEvent, Vnc_EventAck>
}

extension Vnc_VNCServiceClientProtocol {
  internal var serviceName: String {
    return "vnc.VNCService"
  }

  /// Session Management
  ///
  /// - Parameters:
  ///   - request: Request to send to StartSession.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startSession(
    _ request: Vnc_StartSessionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vnc_StartSessionRequest, Vnc_StartSessionResponse> {
    return self.makeUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.startSession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartSessionInterceptors() ?? []
    )
  }

  /// Unary call to StopSession
  ///
  /// - Parameters:
  ///   - request: Request to send to StopSession.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stopSession(
    _ request: Vnc_StopSessionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vnc_StopSessionRequest, Vnc_EventAck> {
    return self.makeUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.stopSession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopSessionInterceptors() ?? []
    )
  }

  /// Unary call to ListSessions
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSessions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listSessions(
    _ request: Vnc_ListSessionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vnc_ListSessionsRequest, Vnc_ListSessionsResponse> {
    return self.makeUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.listSessions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSessionsInterceptors() ?? []
    )
  }

  /// Input Events
  ///
  /// - Parameters:
  ///   - request: Request to send to SendPointerEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendPointerEvent(
    _ request: Vnc_PointerEvent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vnc_PointerEvent, Vnc_EventAck> {
    return self.makeUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendPointerEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPointerEventInterceptors() ?? []
    )
  }

  /// Unary call to SendMouseWheelEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMouseWheelEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendMouseWheelEvent(
    _ request: Vnc_MouseWheelEvent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vnc_MouseWheelEvent, Vnc_EventAck> {
    return self.makeUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendMouseWheelEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMouseWheelEventInterceptors() ?? []
    )
  }

  /// Unary call to SendMouseButtonEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMouseButtonEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendMouseButtonEvent(
    _ request: Vnc_MouseButtonEvent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vnc_MouseButtonEvent, Vnc_EventAck> {
    return self.makeUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendMouseButtonEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMouseButtonEventInterceptors() ?? []
    )
  }

  /// Unary call to SendKeyEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to SendKeyEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendKeyEvent(
    _ request: Vnc_KeyEvent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vnc_KeyEvent, Vnc_EventAck> {
    return self.makeUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendKeyEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendKeyEventInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Vnc_VNCServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Vnc_VNCServiceNIOClient")
internal final class Vnc_VNCServiceClient: Vnc_VNCServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the vnc.VNCService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Vnc_VNCServiceNIOClient: Vnc_VNCServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the vnc.VNCService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Vnc_VNCServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol? { get }

  func makeStartSessionCall(
    _ request: Vnc_StartSessionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vnc_StartSessionRequest, Vnc_StartSessionResponse>

  func makeStopSessionCall(
    _ request: Vnc_StopSessionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vnc_StopSessionRequest, Vnc_EventAck>

  func makeListSessionsCall(
    _ request: Vnc_ListSessionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vnc_ListSessionsRequest, Vnc_ListSessionsResponse>

  func makeSendPointerEventCall(
    _ request: Vnc_PointerEvent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vnc_PointerEvent, Vnc_EventAck>

  func makeSendMouseWheelEventCall(
    _ request: Vnc_MouseWheelEvent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vnc_MouseWheelEvent, Vnc_EventAck>

  func makeSendMouseButtonEventCall(
    _ request: Vnc_MouseButtonEvent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vnc_MouseButtonEvent, Vnc_EventAck>

  func makeSendKeyEventCall(
    _ request: Vnc_KeyEvent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vnc_KeyEvent, Vnc_EventAck>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vnc_VNCServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Vnc_VNCServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeStartSessionCall(
    _ request: Vnc_StartSessionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vnc_StartSessionRequest, Vnc_StartSessionResponse> {
    return self.makeAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.startSession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartSessionInterceptors() ?? []
    )
  }

  internal func makeStopSessionCall(
    _ request: Vnc_StopSessionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vnc_StopSessionRequest, Vnc_EventAck> {
    return self.makeAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.stopSession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopSessionInterceptors() ?? []
    )
  }

  internal func makeListSessionsCall(
    _ request: Vnc_ListSessionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vnc_ListSessionsRequest, Vnc_ListSessionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.listSessions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSessionsInterceptors() ?? []
    )
  }

  internal func makeSendPointerEventCall(
    _ request: Vnc_PointerEvent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vnc_PointerEvent, Vnc_EventAck> {
    return self.makeAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendPointerEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPointerEventInterceptors() ?? []
    )
  }

  internal func makeSendMouseWheelEventCall(
    _ request: Vnc_MouseWheelEvent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vnc_MouseWheelEvent, Vnc_EventAck> {
    return self.makeAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendMouseWheelEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMouseWheelEventInterceptors() ?? []
    )
  }

  internal func makeSendMouseButtonEventCall(
    _ request: Vnc_MouseButtonEvent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vnc_MouseButtonEvent, Vnc_EventAck> {
    return self.makeAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendMouseButtonEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMouseButtonEventInterceptors() ?? []
    )
  }

  internal func makeSendKeyEventCall(
    _ request: Vnc_KeyEvent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vnc_KeyEvent, Vnc_EventAck> {
    return self.makeAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendKeyEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendKeyEventInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vnc_VNCServiceAsyncClientProtocol {
  internal func startSession(
    _ request: Vnc_StartSessionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vnc_StartSessionResponse {
    return try await self.performAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.startSession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartSessionInterceptors() ?? []
    )
  }

  internal func stopSession(
    _ request: Vnc_StopSessionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vnc_EventAck {
    return try await self.performAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.stopSession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopSessionInterceptors() ?? []
    )
  }

  internal func listSessions(
    _ request: Vnc_ListSessionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vnc_ListSessionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.listSessions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSessionsInterceptors() ?? []
    )
  }

  internal func sendPointerEvent(
    _ request: Vnc_PointerEvent,
    callOptions: CallOptions? = nil
  ) async throws -> Vnc_EventAck {
    return try await self.performAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendPointerEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendPointerEventInterceptors() ?? []
    )
  }

  internal func sendMouseWheelEvent(
    _ request: Vnc_MouseWheelEvent,
    callOptions: CallOptions? = nil
  ) async throws -> Vnc_EventAck {
    return try await self.performAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendMouseWheelEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMouseWheelEventInterceptors() ?? []
    )
  }

  internal func sendMouseButtonEvent(
    _ request: Vnc_MouseButtonEvent,
    callOptions: CallOptions? = nil
  ) async throws -> Vnc_EventAck {
    return try await self.performAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendMouseButtonEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMouseButtonEventInterceptors() ?? []
    )
  }

  internal func sendKeyEvent(
    _ request: Vnc_KeyEvent,
    callOptions: CallOptions? = nil
  ) async throws -> Vnc_EventAck {
    return try await self.performAsyncUnaryCall(
      path: Vnc_VNCServiceClientMetadata.Methods.sendKeyEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendKeyEventInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Vnc_VNCServiceAsyncClient: Vnc_VNCServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vnc_VNCServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Vnc_VNCServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'startSession'.
  func makeStartSessionInterceptors() -> [ClientInterceptor<Vnc_StartSessionRequest, Vnc_StartSessionResponse>]

  /// - Returns: Interceptors to use when invoking 'stopSession'.
  func makeStopSessionInterceptors() -> [ClientInterceptor<Vnc_StopSessionRequest, Vnc_EventAck>]

  /// - Returns: Interceptors to use when invoking 'listSessions'.
  func makeListSessionsInterceptors() -> [ClientInterceptor<Vnc_ListSessionsRequest, Vnc_ListSessionsResponse>]

  /// - Returns: Interceptors to use when invoking 'sendPointerEvent'.
  func makeSendPointerEventInterceptors() -> [ClientInterceptor<Vnc_PointerEvent, Vnc_EventAck>]

  /// - Returns: Interceptors to use when invoking 'sendMouseWheelEvent'.
  func makeSendMouseWheelEventInterceptors() -> [ClientInterceptor<Vnc_MouseWheelEvent, Vnc_EventAck>]

  /// - Returns: Interceptors to use when invoking 'sendMouseButtonEvent'.
  func makeSendMouseButtonEventInterceptors() -> [ClientInterceptor<Vnc_MouseButtonEvent, Vnc_EventAck>]

  /// - Returns: Interceptors to use when invoking 'sendKeyEvent'.
  func makeSendKeyEventInterceptors() -> [ClientInterceptor<Vnc_KeyEvent, Vnc_EventAck>]
}

internal enum Vnc_VNCServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "VNCService",
    fullName: "vnc.VNCService",
    methods: [
      Vnc_VNCServiceClientMetadata.Methods.startSession,
      Vnc_VNCServiceClientMetadata.Methods.stopSession,
      Vnc_VNCServiceClientMetadata.Methods.listSessions,
      Vnc_VNCServiceClientMetadata.Methods.sendPointerEvent,
      Vnc_VNCServiceClientMetadata.Methods.sendMouseWheelEvent,
      Vnc_VNCServiceClientMetadata.Methods.sendMouseButtonEvent,
      Vnc_VNCServiceClientMetadata.Methods.sendKeyEvent,
    ]
  )

  internal enum Methods {
    internal static let startSession = GRPCMethodDescriptor(
      name: "StartSession",
      path: "/vnc.VNCService/StartSession",
      type: GRPCCallType.unary
    )

    internal static let stopSession = GRPCMethodDescriptor(
      name: "StopSession",
      path: "/vnc.VNCService/StopSession",
      type: GRPCCallType.unary
    )

    internal static let listSessions = GRPCMethodDescriptor(
      name: "ListSessions",
      path: "/vnc.VNCService/ListSessions",
      type: GRPCCallType.unary
    )

    internal static let sendPointerEvent = GRPCMethodDescriptor(
      name: "SendPointerEvent",
      path: "/vnc.VNCService/SendPointerEvent",
      type: GRPCCallType.unary
    )

    internal static let sendMouseWheelEvent = GRPCMethodDescriptor(
      name: "SendMouseWheelEvent",
      path: "/vnc.VNCService/SendMouseWheelEvent",
      type: GRPCCallType.unary
    )

    internal static let sendMouseButtonEvent = GRPCMethodDescriptor(
      name: "SendMouseButtonEvent",
      path: "/vnc.VNCService/SendMouseButtonEvent",
      type: GRPCCallType.unary
    )

    internal static let sendKeyEvent = GRPCMethodDescriptor(
      name: "SendKeyEvent",
      path: "/vnc.VNCService/SendKeyEvent",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Vnc_VNCServiceProvider: CallHandlerProvider {
  var interceptors: Vnc_VNCServiceServerInterceptorFactoryProtocol? { get }

  /// Session Management
  func startSession(request: Vnc_StartSessionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vnc_StartSessionResponse>

  func stopSession(request: Vnc_StopSessionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vnc_EventAck>

  func listSessions(request: Vnc_ListSessionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vnc_ListSessionsResponse>

  /// Input Events
  func sendPointerEvent(request: Vnc_PointerEvent, context: StatusOnlyCallContext) -> EventLoopFuture<Vnc_EventAck>

  func sendMouseWheelEvent(request: Vnc_MouseWheelEvent, context: StatusOnlyCallContext) -> EventLoopFuture<Vnc_EventAck>

  func sendMouseButtonEvent(request: Vnc_MouseButtonEvent, context: StatusOnlyCallContext) -> EventLoopFuture<Vnc_EventAck>

  func sendKeyEvent(request: Vnc_KeyEvent, context: StatusOnlyCallContext) -> EventLoopFuture<Vnc_EventAck>
}

extension Vnc_VNCServiceProvider {
  internal var serviceName: Substring {
    return Vnc_VNCServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StartSession":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_StartSessionRequest>(),
        responseSerializer: ProtobufSerializer<Vnc_StartSessionResponse>(),
        interceptors: self.interceptors?.makeStartSessionInterceptors() ?? [],
        userFunction: self.startSession(request:context:)
      )

    case "StopSession":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_StopSessionRequest>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeStopSessionInterceptors() ?? [],
        userFunction: self.stopSession(request:context:)
      )

    case "ListSessions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_ListSessionsRequest>(),
        responseSerializer: ProtobufSerializer<Vnc_ListSessionsResponse>(),
        interceptors: self.interceptors?.makeListSessionsInterceptors() ?? [],
        userFunction: self.listSessions(request:context:)
      )

    case "SendPointerEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_PointerEvent>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeSendPointerEventInterceptors() ?? [],
        userFunction: self.sendPointerEvent(request:context:)
      )

    case "SendMouseWheelEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_MouseWheelEvent>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeSendMouseWheelEventInterceptors() ?? [],
        userFunction: self.sendMouseWheelEvent(request:context:)
      )

    case "SendMouseButtonEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_MouseButtonEvent>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeSendMouseButtonEventInterceptors() ?? [],
        userFunction: self.sendMouseButtonEvent(request:context:)
      )

    case "SendKeyEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_KeyEvent>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeSendKeyEventInterceptors() ?? [],
        userFunction: self.sendKeyEvent(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Vnc_VNCServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Vnc_VNCServiceServerInterceptorFactoryProtocol? { get }

  /// Session Management
  func startSession(
    request: Vnc_StartSessionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vnc_StartSessionResponse

  func stopSession(
    request: Vnc_StopSessionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vnc_EventAck

  func listSessions(
    request: Vnc_ListSessionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vnc_ListSessionsResponse

  /// Input Events
  func sendPointerEvent(
    request: Vnc_PointerEvent,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vnc_EventAck

  func sendMouseWheelEvent(
    request: Vnc_MouseWheelEvent,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vnc_EventAck

  func sendMouseButtonEvent(
    request: Vnc_MouseButtonEvent,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vnc_EventAck

  func sendKeyEvent(
    request: Vnc_KeyEvent,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vnc_EventAck
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vnc_VNCServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Vnc_VNCServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Vnc_VNCServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Vnc_VNCServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StartSession":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_StartSessionRequest>(),
        responseSerializer: ProtobufSerializer<Vnc_StartSessionResponse>(),
        interceptors: self.interceptors?.makeStartSessionInterceptors() ?? [],
        wrapping: { try await self.startSession(request: $0, context: $1) }
      )

    case "StopSession":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_StopSessionRequest>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeStopSessionInterceptors() ?? [],
        wrapping: { try await self.stopSession(request: $0, context: $1) }
      )

    case "ListSessions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_ListSessionsRequest>(),
        responseSerializer: ProtobufSerializer<Vnc_ListSessionsResponse>(),
        interceptors: self.interceptors?.makeListSessionsInterceptors() ?? [],
        wrapping: { try await self.listSessions(request: $0, context: $1) }
      )

    case "SendPointerEvent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_PointerEvent>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeSendPointerEventInterceptors() ?? [],
        wrapping: { try await self.sendPointerEvent(request: $0, context: $1) }
      )

    case "SendMouseWheelEvent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_MouseWheelEvent>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeSendMouseWheelEventInterceptors() ?? [],
        wrapping: { try await self.sendMouseWheelEvent(request: $0, context: $1) }
      )

    case "SendMouseButtonEvent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_MouseButtonEvent>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeSendMouseButtonEventInterceptors() ?? [],
        wrapping: { try await self.sendMouseButtonEvent(request: $0, context: $1) }
      )

    case "SendKeyEvent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vnc_KeyEvent>(),
        responseSerializer: ProtobufSerializer<Vnc_EventAck>(),
        interceptors: self.interceptors?.makeSendKeyEventInterceptors() ?? [],
        wrapping: { try await self.sendKeyEvent(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Vnc_VNCServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'startSession'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartSessionInterceptors() -> [ServerInterceptor<Vnc_StartSessionRequest, Vnc_StartSessionResponse>]

  /// - Returns: Interceptors to use when handling 'stopSession'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopSessionInterceptors() -> [ServerInterceptor<Vnc_StopSessionRequest, Vnc_EventAck>]

  /// - Returns: Interceptors to use when handling 'listSessions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListSessionsInterceptors() -> [ServerInterceptor<Vnc_ListSessionsRequest, Vnc_ListSessionsResponse>]

  /// - Returns: Interceptors to use when handling 'sendPointerEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendPointerEventInterceptors() -> [ServerInterceptor<Vnc_PointerEvent, Vnc_EventAck>]

  /// - Returns: Interceptors to use when handling 'sendMouseWheelEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMouseWheelEventInterceptors() -> [ServerInterceptor<Vnc_MouseWheelEvent, Vnc_EventAck>]

  /// - Returns: Interceptors to use when handling 'sendMouseButtonEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMouseButtonEventInterceptors() -> [ServerInterceptor<Vnc_MouseButtonEvent, Vnc_EventAck>]

  /// - Returns: Interceptors to use when handling 'sendKeyEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendKeyEventInterceptors() -> [ServerInterceptor<Vnc_KeyEvent, Vnc_EventAck>]
}

internal enum Vnc_VNCServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "VNCService",
    fullName: "vnc.VNCService",
    methods: [
      Vnc_VNCServiceServerMetadata.Methods.startSession,
      Vnc_VNCServiceServerMetadata.Methods.stopSession,
      Vnc_VNCServiceServerMetadata.Methods.listSessions,
      Vnc_VNCServiceServerMetadata.Methods.sendPointerEvent,
      Vnc_VNCServiceServerMetadata.Methods.sendMouseWheelEvent,
      Vnc_VNCServiceServerMetadata.Methods.sendMouseButtonEvent,
      Vnc_VNCServiceServerMetadata.Methods.sendKeyEvent,
    ]
  )

  internal enum Methods {
    internal static let startSession = GRPCMethodDescriptor(
      name: "StartSession",
      path: "/vnc.VNCService/StartSession",
      type: GRPCCallType.unary
    )

    internal static let stopSession = GRPCMethodDescriptor(
      name: "StopSession",
      path: "/vnc.VNCService/StopSession",
      type: GRPCCallType.unary
    )

    internal static let listSessions = GRPCMethodDescriptor(
      name: "ListSessions",
      path: "/vnc.VNCService/ListSessions",
      type: GRPCCallType.unary
    )

    internal static let sendPointerEvent = GRPCMethodDescriptor(
      name: "SendPointerEvent",
      path: "/vnc.VNCService/SendPointerEvent",
      type: GRPCCallType.unary
    )

    internal static let sendMouseWheelEvent = GRPCMethodDescriptor(
      name: "SendMouseWheelEvent",
      path: "/vnc.VNCService/SendMouseWheelEvent",
      type: GRPCCallType.unary
    )

    internal static let sendMouseButtonEvent = GRPCMethodDescriptor(
      name: "SendMouseButtonEvent",
      path: "/vnc.VNCService/SendMouseButtonEvent",
      type: GRPCCallType.unary
    )

    internal static let sendKeyEvent = GRPCMethodDescriptor(
      name: "SendKeyEvent",
      path: "/vnc.VNCService/SendKeyEvent",
      type: GRPCCallType.unary
    )
  }
}
